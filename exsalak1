- import os
import pandas as pd
import warnings
warnings.filterwarnings('ignore')
pd.options.display.float_format = '{:.02f}'.format

mdf = pd.read_excel("/content/drive/MyDrive/สลากอาชีพ.xlsx", header=0)
print(mdf)

mdf2 = pd.get_dummies(mdf, columns = ['OCC_NEW','Mymo'])

print(mdf2)

mdf2.describe()
mdf2.corr()

%matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns


for i, col in enumerate(mdf2.columns[1:]):
    plt.figure(i)
    sns.distplot(mdf2[col])
    
plt.show()

# https://plotly.com/python/histograms/
import plotly.express as px
fig = px.histogram(mdf2, x="Income")
fig.show()

import plotly.express as px
fig = px.histogram(mdf2, x="Salak")
fig.show()

from sklearn.preprocessing import StandardScaler #https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html

mdf2_std = pd.DataFrame(StandardScaler().fit_transform(mdf2[mdf2.columns[1:]]))
mdf2_std.head(5)

from sklearn.cluster import KMeans
# Use the Elbow method to find a good number of clusters using Within-Cluster-Sum-of-Squares (WCSS)
wcss = []
N = range(2, 20)
for i in N:
    model = KMeans(n_clusters=i) 
    model.fit_predict(mdf2_std)
    wcss.append(model.inertia_)
    
plt.plot(N, wcss, 'bo-')
plt.title("Computing Within-Cluster-Sum-of-Squares (WCSS)")
plt.xlabel("Number of clusters")
plt.ylabel("WCSS")
plt.show()

from sklearn.metrics import silhouette_samples, silhouette_score
import matplotlib.cm as cm
import numpy as np

ss = []

for n_clusters in N:
    # Create a subplot with 1 row and 2 columns
    fig, (ax1, ax2) = plt.subplots(1, 2)
    fig.set_size_inches(18, 7)

    # The 1st subplot is the silhouette plot
    # The silhouette coefficient can range from -1, 1 but in this example all
    # lie within [-0.1, 1]
    ax1.set_xlim([-0.1, 1])
    # The (n_clusters+1)*10 is for inserting blank space between silhouette
    # plots of individual clusters, to demarcate them clearly.
    ax1.set_ylim([0, len(mdf2_std) + (n_clusters + 1) * 10])

    # Initialize the clusterer with n_clusters value and a random generator
    # seed of 10 for reproducibility.
    clusterer = KMeans(n_clusters=n_clusters, random_state=10)
    cluster_labels = clusterer.fit_predict(mdf2_std)

    # The silhouette_score gives the average value for all the samples.
    # This gives a perspective into the density and separation of the formed
    # clusters
    silhouette_avg = silhouette_score(mdf2_std, cluster_labels)
    print("For n_clusters =", n_clusters,
          "The average silhouette_score is :", silhouette_avg)

    # Compute the silhouette scores for each sample
    sample_silhouette_values = silhouette_samples(mdf2_std, cluster_labels)

    y_lower = 10
    for i in range(n_clusters):
        # Aggregate the silhouette scores for samples belonging to
        # cluster i, and sort them
        ith_cluster_silhouette_values = \
            sample_silhouette_values[cluster_labels == i]

        ith_cluster_silhouette_values.sort()

        size_cluster_i = ith_cluster_silhouette_values.shape[0]
        y_upper = y_lower + size_cluster_i

        color = cm.nipy_spectral(float(i) / n_clusters)
        ax1.fill_betweenx(np.arange(y_lower, y_upper),
                          0, ith_cluster_silhouette_values,
                          facecolor=color, edgecolor=color, alpha=0.7)

        # Label the silhouette plots with their cluster numbers at the middle
        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))

        # Compute the new y_lower for next plot
        y_lower = y_upper + 10  # 10 for the 0 samples

    ax1.set_title("The silhouette plot for the various clusters.")
    ax1.set_xlabel("The silhouette coefficient values")
    ax1.set_ylabel("Cluster label")

    # The vertical line for average silhouette score of all the values
    ax1.axvline(x=silhouette_avg, color="red", linestyle="--")

    ax1.set_yticks([])  # Clear the yaxis labels / ticks
    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])

    # Labeling the clusters
    centers = clusterer.cluster_centers_
    # Draw white circles at cluster centers
    ax2.scatter(centers[:, 0], centers[:, 1], marker='o',
                c="white", alpha=1, s=200, edgecolor='k')

    for i, c in enumerate(centers):
        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1,
                    s=50, edgecolor='k')

    ax2.set_title("The visualization of the clustered data.")
    ax2.set_xlabel("Feature space for the 1st feature")
    ax2.set_ylabel("Feature space for the 2nd feature")

    plt.suptitle(("Silhouette analysis for KMeans clustering on sample data "
                  "with n_clusters = %d" % n_clusters),
                 fontsize=14, fontweight='bold')

cluster = KMeans(n_clusters=19)
mdf['cluster'] = cluster.fit_predict(mdf2_std)
print(mdf)

mdfCluster = mdf.groupby('cluster', as_index=False).mean()
print(mdf2Cluster)
mdfCluster['NUM_CUST'] = mdf[['cluster','CIF_NUMBER']].groupby('cluster').count()

mdfCluster

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure()
fig, ax = plt.subplots()
ax.scatter(mdfCluster['Income'], mdfCluster['Salak'], s=mdfCluster['NUM_CUST'], alpha = 0.5)
ax.set_xlabel("Income")
ax.set_ylabel("Salak")

for i, txt in enumerate(mdfCluster['cluster']):
    ax.annotate(txt, 
                (mdfCluster['Income'][i], 
                mdfCluster["Salak"][i]), 
                horizontalalignment='center',
                verticalalignment='center')

plt.show()

for i, col in enumerate(mdf.columns[1:-1]):
    sns.boxplot(x="cluster", y =col, data=mdf)
    plt.show()

import seaborn as sns
import warnings
import itertools
warnings.filterwarnings("ignore")
%matplotlib inline
correlation = mdf2[["Income",'Salak','Saving']].corr()
plt.figure(figsize=(9,7))
sns.heatmap(correlation,annot=True,cmap="coolwarm",linewidth=2,edgecolor="k")
plt.title("CORRELATION BETWEEN VARIABLES")

import seaborn as sns
sns.set(style="ticks")
sns.pairplot(mdf, vars=["Income", 'Salak', 'Saving'],hue="Mymo", markers=["o", "s"])

plt.scatter(mdf['Income'],mdf['Salak'], cmap="coolwarm", c=mdf['Saving'])
plt.ylabel("Income")
plt.xlabel("Salak")
plt.title("Saing")
plt.show()

mdf_have = mdf[mdf["Mymo"]=="HAVE MYMO"]
plt.scatter(mdf_have['Age'],mdf_female['Annual Income (k$)'], cmap="coolwarm", c=mdf_female['Spending Score (1-100)'])
plt.ylabel("Annual Income (k$)")
plt.xlabel("Age")
plt.title("Female Spending Score (1-100)")
plt.show()

mdf_male = mdf[mdf["Gender"]=="Male"]
plt.scatter(mdf_male['Age'],mdf_male['Annual Income (k$)'], cmap="coolwarm", c=mdf_male['Spending Score (1-100)'])
plt.ylabel("Annual Income (k$)")
plt.xlabel("Age")
plt.title("Male Spending Score (1-100)")
plt.show()
